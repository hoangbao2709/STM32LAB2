
Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c14  08002c14  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002c14  08002c14  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c14  08002c14  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000018  08002c34  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002c34  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088d2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e5  00000000  00000000  00028913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00029ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010f4  00000000  00000000  0002b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a5e  00000000  00000000  0002c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008236f  00000000  00000000  00035f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8281  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000b82d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bd8 	.word	0x08002bd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002bd8 	.word	0x08002bd8

0800014c <Khong_h_1>:

#include "main.h"

static void Khong_h_1(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2101      	movs	r1, #1
 8000154:	4811      	ldr	r0, [pc, #68]	; (800019c <Khong_h_1+0x50>)
 8000156:	f001 fd43 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2102      	movs	r1, #2
 800015e:	480f      	ldr	r0, [pc, #60]	; (800019c <Khong_h_1+0x50>)
 8000160:	f001 fd3e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2104      	movs	r1, #4
 8000168:	480c      	ldr	r0, [pc, #48]	; (800019c <Khong_h_1+0x50>)
 800016a:	f001 fd39 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2108      	movs	r1, #8
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <Khong_h_1+0x50>)
 8000174:	f001 fd34 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <Khong_h_1+0x50>)
 8000180:	f001 fd2e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2120      	movs	r1, #32
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <Khong_h_1+0x50>)
 800018a:	f001 fd29 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2140      	movs	r1, #64	; 0x40
 8000192:	4802      	ldr	r0, [pc, #8]	; (800019c <Khong_h_1+0x50>)
 8000194:	f001 fd24 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000198:	bf00      	nop
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <Mot_h_1>:

static void Mot_h_1(void) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2101      	movs	r1, #1
 80001a8:	4811      	ldr	r0, [pc, #68]	; (80001f0 <Mot_h_1+0x50>)
 80001aa:	f001 fd19 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	480f      	ldr	r0, [pc, #60]	; (80001f0 <Mot_h_1+0x50>)
 80001b4:	f001 fd14 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2104      	movs	r1, #4
 80001bc:	480c      	ldr	r0, [pc, #48]	; (80001f0 <Mot_h_1+0x50>)
 80001be:	f001 fd0f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2108      	movs	r1, #8
 80001c6:	480a      	ldr	r0, [pc, #40]	; (80001f0 <Mot_h_1+0x50>)
 80001c8:	f001 fd0a 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4807      	ldr	r0, [pc, #28]	; (80001f0 <Mot_h_1+0x50>)
 80001d4:	f001 fd04 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <Mot_h_1+0x50>)
 80001de:	f001 fcff 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <Mot_h_1+0x50>)
 80001e8:	f001 fcfa 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800

080001f4 <Hai_h_1>:

static void Hai_h_1(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2101      	movs	r1, #1
 80001fc:	4811      	ldr	r0, [pc, #68]	; (8000244 <Hai_h_1+0x50>)
 80001fe:	f001 fcef 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2102      	movs	r1, #2
 8000206:	480f      	ldr	r0, [pc, #60]	; (8000244 <Hai_h_1+0x50>)
 8000208:	f001 fcea 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2104      	movs	r1, #4
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <Hai_h_1+0x50>)
 8000212:	f001 fce5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2108      	movs	r1, #8
 800021a:	480a      	ldr	r0, [pc, #40]	; (8000244 <Hai_h_1+0x50>)
 800021c:	f001 fce0 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	4807      	ldr	r0, [pc, #28]	; (8000244 <Hai_h_1+0x50>)
 8000228:	f001 fcda 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2120      	movs	r1, #32
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <Hai_h_1+0x50>)
 8000232:	f001 fcd5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	4802      	ldr	r0, [pc, #8]	; (8000244 <Hai_h_1+0x50>)
 800023c:	f001 fcd0 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <Ba_h_1>:

static void Ba_h_1(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2101      	movs	r1, #1
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <Ba_h_1+0x50>)
 8000252:	f001 fcc5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2102      	movs	r1, #2
 800025a:	480f      	ldr	r0, [pc, #60]	; (8000298 <Ba_h_1+0x50>)
 800025c:	f001 fcc0 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2104      	movs	r1, #4
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <Ba_h_1+0x50>)
 8000266:	f001 fcbb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2108      	movs	r1, #8
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <Ba_h_1+0x50>)
 8000270:	f001 fcb6 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <Ba_h_1+0x50>)
 800027c:	f001 fcb0 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <Ba_h_1+0x50>)
 8000286:	f001 fcab 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	4802      	ldr	r0, [pc, #8]	; (8000298 <Ba_h_1+0x50>)
 8000290:	f001 fca6 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40010800 	.word	0x40010800

0800029c <Bon_h_1>:

static void Bon_h_1(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2101      	movs	r1, #1
 80002a4:	4811      	ldr	r0, [pc, #68]	; (80002ec <Bon_h_1+0x50>)
 80002a6:	f001 fc9b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2102      	movs	r1, #2
 80002ae:	480f      	ldr	r0, [pc, #60]	; (80002ec <Bon_h_1+0x50>)
 80002b0:	f001 fc96 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <Bon_h_1+0x50>)
 80002ba:	f001 fc91 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2108      	movs	r1, #8
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <Bon_h_1+0x50>)
 80002c4:	f001 fc8c 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <Bon_h_1+0x50>)
 80002d0:	f001 fc86 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <Bon_h_1+0x50>)
 80002da:	f001 fc81 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <Bon_h_1+0x50>)
 80002e4:	f001 fc7c 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010800 	.word	0x40010800

080002f0 <Nam_h_1>:

static void Nam_h_1(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	4811      	ldr	r0, [pc, #68]	; (8000340 <Nam_h_1+0x50>)
 80002fa:	f001 fc71 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <Nam_h_1+0x50>)
 8000304:	f001 fc6c 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <Nam_h_1+0x50>)
 800030e:	f001 fc67 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <Nam_h_1+0x50>)
 8000318:	f001 fc62 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000322:	4807      	ldr	r0, [pc, #28]	; (8000340 <Nam_h_1+0x50>)
 8000324:	f001 fc5c 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <Nam_h_1+0x50>)
 800032e:	f001 fc57 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <Nam_h_1+0x50>)
 8000338:	f001 fc52 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010800 	.word	0x40010800

08000344 <Sau_h_1>:

static void Sau_h_1(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <Sau_h_1+0x50>)
 800034e:	f001 fc47 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2102      	movs	r1, #2
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <Sau_h_1+0x50>)
 8000358:	f001 fc42 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <Sau_h_1+0x50>)
 8000362:	f001 fc3d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	480a      	ldr	r0, [pc, #40]	; (8000394 <Sau_h_1+0x50>)
 800036c:	f001 fc38 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000376:	4807      	ldr	r0, [pc, #28]	; (8000394 <Sau_h_1+0x50>)
 8000378:	f001 fc32 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2120      	movs	r1, #32
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <Sau_h_1+0x50>)
 8000382:	f001 fc2d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2140      	movs	r1, #64	; 0x40
 800038a:	4802      	ldr	r0, [pc, #8]	; (8000394 <Sau_h_1+0x50>)
 800038c:	f001 fc28 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010800 	.word	0x40010800

08000398 <Bay_h_1>:

static void Bay_h_1(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2101      	movs	r1, #1
 80003a0:	4811      	ldr	r0, [pc, #68]	; (80003e8 <Bay_h_1+0x50>)
 80003a2:	f001 fc1d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2102      	movs	r1, #2
 80003aa:	480f      	ldr	r0, [pc, #60]	; (80003e8 <Bay_h_1+0x50>)
 80003ac:	f001 fc18 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2104      	movs	r1, #4
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <Bay_h_1+0x50>)
 80003b6:	f001 fc13 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2108      	movs	r1, #8
 80003be:	480a      	ldr	r0, [pc, #40]	; (80003e8 <Bay_h_1+0x50>)
 80003c0:	f001 fc0e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	4807      	ldr	r0, [pc, #28]	; (80003e8 <Bay_h_1+0x50>)
 80003cc:	f001 fc08 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <Bay_h_1+0x50>)
 80003d6:	f001 fc03 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <Bay_h_1+0x50>)
 80003e0:	f001 fbfe 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40010800 	.word	0x40010800

080003ec <Tam_h_1>:

static void Tam_h_1(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <Tam_h_1+0x50>)
 80003f6:	f001 fbf3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <Tam_h_1+0x50>)
 8000400:	f001 fbee 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <Tam_h_1+0x50>)
 800040a:	f001 fbe9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	480a      	ldr	r0, [pc, #40]	; (800043c <Tam_h_1+0x50>)
 8000414:	f001 fbe4 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <Tam_h_1+0x50>)
 8000420:	f001 fbde 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <Tam_h_1+0x50>)
 800042a:	f001 fbd9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	4802      	ldr	r0, [pc, #8]	; (800043c <Tam_h_1+0x50>)
 8000434:	f001 fbd4 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010800 	.word	0x40010800

08000440 <Chin_h_1>:

static void Chin_h_1(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_1_1_GPIO_Port, h_1_1_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <Chin_h_1+0x50>)
 800044a:	f001 fbc9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_2_GPIO_Port, h_1_2_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <Chin_h_1+0x50>)
 8000454:	f001 fbc4 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_3_GPIO_Port, h_1_3_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <Chin_h_1+0x50>)
 800045e:	f001 fbbf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_4_GPIO_Port, h_1_4_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2108      	movs	r1, #8
 8000466:	480a      	ldr	r0, [pc, #40]	; (8000490 <Chin_h_1+0x50>)
 8000468:	f001 fbba 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_5_GPIO_Port, h_1_5_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000472:	4807      	ldr	r0, [pc, #28]	; (8000490 <Chin_h_1+0x50>)
 8000474:	f001 fbb4 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_6_GPIO_Port, h_1_6_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2120      	movs	r1, #32
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <Chin_h_1+0x50>)
 800047e:	f001 fbaf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_1_7_GPIO_Port, h_1_7_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <Chin_h_1+0x50>)
 8000488:	f001 fbaa 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010800 	.word	0x40010800

08000494 <display7SEG_h_1>:
static void display7SEG_h_1(int num) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b09      	cmp	r3, #9
 80004a0:	d834      	bhi.n	800050c <display7SEG_h_1+0x78>
 80004a2:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <display7SEG_h_1+0x14>)
 80004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a8:	080004d1 	.word	0x080004d1
 80004ac:	080004d7 	.word	0x080004d7
 80004b0:	080004dd 	.word	0x080004dd
 80004b4:	080004e3 	.word	0x080004e3
 80004b8:	080004e9 	.word	0x080004e9
 80004bc:	080004ef 	.word	0x080004ef
 80004c0:	080004f5 	.word	0x080004f5
 80004c4:	080004fb 	.word	0x080004fb
 80004c8:	08000501 	.word	0x08000501
 80004cc:	08000507 	.word	0x08000507
    switch(num) {
        case 0: Khong_h_1(); break;
 80004d0:	f7ff fe3c 	bl	800014c <Khong_h_1>
 80004d4:	e01a      	b.n	800050c <display7SEG_h_1+0x78>
        case 1: Mot_h_1(); break;
 80004d6:	f7ff fe63 	bl	80001a0 <Mot_h_1>
 80004da:	e017      	b.n	800050c <display7SEG_h_1+0x78>
        case 2: Hai_h_1(); break;
 80004dc:	f7ff fe8a 	bl	80001f4 <Hai_h_1>
 80004e0:	e014      	b.n	800050c <display7SEG_h_1+0x78>
        case 3: Ba_h_1(); break;
 80004e2:	f7ff feb1 	bl	8000248 <Ba_h_1>
 80004e6:	e011      	b.n	800050c <display7SEG_h_1+0x78>
        case 4: Bon_h_1(); break;
 80004e8:	f7ff fed8 	bl	800029c <Bon_h_1>
 80004ec:	e00e      	b.n	800050c <display7SEG_h_1+0x78>
        case 5: Nam_h_1(); break;
 80004ee:	f7ff feff 	bl	80002f0 <Nam_h_1>
 80004f2:	e00b      	b.n	800050c <display7SEG_h_1+0x78>
        case 6: Sau_h_1(); break;
 80004f4:	f7ff ff26 	bl	8000344 <Sau_h_1>
 80004f8:	e008      	b.n	800050c <display7SEG_h_1+0x78>
        case 7: Bay_h_1(); break;
 80004fa:	f7ff ff4d 	bl	8000398 <Bay_h_1>
 80004fe:	e005      	b.n	800050c <display7SEG_h_1+0x78>
        case 8: Tam_h_1(); break;
 8000500:	f7ff ff74 	bl	80003ec <Tam_h_1>
 8000504:	e002      	b.n	800050c <display7SEG_h_1+0x78>
        case 9: Chin_h_1(); break;
 8000506:	f7ff ff9b 	bl	8000440 <Chin_h_1>
 800050a:	bf00      	nop
    }
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <Khong_h_2>:

#include "main.h"

static void Khong_h_2(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	4814      	ldr	r0, [pc, #80]	; (8000570 <Khong_h_2+0x5c>)
 800051e:	f001 fb5f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <Khong_h_2+0x5c>)
 800052a:	f001 fb59 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <Khong_h_2+0x5c>)
 8000536:	f001 fb53 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <Khong_h_2+0x5c>)
 8000542:	f001 fb4d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <Khong_h_2+0x5c>)
 800054e:	f001 fb47 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <Khong_h_2+0x5c>)
 800055a:	f001 fb41 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <Khong_h_2+0x5c>)
 8000566:	f001 fb3b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40010800 	.word	0x40010800

08000574 <Mot_h_2>:

static void Mot_h_2(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <Mot_h_2+0x5c>)
 800057e:	f001 fb2f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <Mot_h_2+0x5c>)
 800058a:	f001 fb29 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <Mot_h_2+0x5c>)
 8000596:	f001 fb23 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <Mot_h_2+0x5c>)
 80005a2:	f001 fb1d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	4808      	ldr	r0, [pc, #32]	; (80005d0 <Mot_h_2+0x5c>)
 80005ae:	f001 fb17 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <Mot_h_2+0x5c>)
 80005ba:	f001 fb11 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <Mot_h_2+0x5c>)
 80005c6:	f001 fb0b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010800 	.word	0x40010800

080005d4 <Hai_h_2>:

static void Hai_h_2(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <Hai_h_2+0x5c>)
 80005de:	f001 faff 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <Hai_h_2+0x5c>)
 80005ea:	f001 faf9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <Hai_h_2+0x5c>)
 80005f6:	f001 faf3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <Hai_h_2+0x5c>)
 8000602:	f001 faed 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <Hai_h_2+0x5c>)
 800060e:	f001 fae7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <Hai_h_2+0x5c>)
 800061a:	f001 fae1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <Hai_h_2+0x5c>)
 8000626:	f001 fadb 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010800 	.word	0x40010800

08000634 <Ba_h_2>:

static void Ba_h_2(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <Ba_h_2+0x5c>)
 800063e:	f001 facf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <Ba_h_2+0x5c>)
 800064a:	f001 fac9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <Ba_h_2+0x5c>)
 8000656:	f001 fac3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <Ba_h_2+0x5c>)
 8000662:	f001 fabd 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <Ba_h_2+0x5c>)
 800066e:	f001 fab7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <Ba_h_2+0x5c>)
 800067a:	f001 fab1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <Ba_h_2+0x5c>)
 8000686:	f001 faab 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010800 	.word	0x40010800

08000694 <Bon_h_2>:

static void Bon_h_2(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <Bon_h_2+0x5c>)
 800069e:	f001 fa9f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <Bon_h_2+0x5c>)
 80006aa:	f001 fa99 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	480e      	ldr	r0, [pc, #56]	; (80006f0 <Bon_h_2+0x5c>)
 80006b6:	f001 fa93 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <Bon_h_2+0x5c>)
 80006c2:	f001 fa8d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <Bon_h_2+0x5c>)
 80006ce:	f001 fa87 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <Bon_h_2+0x5c>)
 80006da:	f001 fa81 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <Bon_h_2+0x5c>)
 80006e6:	f001 fa7b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40010800 	.word	0x40010800

080006f4 <Nam_h_2>:

static void Nam_h_2(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <Nam_h_2+0x5c>)
 80006fe:	f001 fa6f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <Nam_h_2+0x5c>)
 800070a:	f001 fa69 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <Nam_h_2+0x5c>)
 8000716:	f001 fa63 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <Nam_h_2+0x5c>)
 8000722:	f001 fa5d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <Nam_h_2+0x5c>)
 800072e:	f001 fa57 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <Nam_h_2+0x5c>)
 800073a:	f001 fa51 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <Nam_h_2+0x5c>)
 8000746:	f001 fa4b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010800 	.word	0x40010800

08000754 <Sau_h_2>:

static void Sau_h_2(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <Sau_h_2+0x5c>)
 800075e:	f001 fa3f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <Sau_h_2+0x5c>)
 800076a:	f001 fa39 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	480e      	ldr	r0, [pc, #56]	; (80007b0 <Sau_h_2+0x5c>)
 8000776:	f001 fa33 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <Sau_h_2+0x5c>)
 8000782:	f001 fa2d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <Sau_h_2+0x5c>)
 800078e:	f001 fa27 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <Sau_h_2+0x5c>)
 800079a:	f001 fa21 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <Sau_h_2+0x5c>)
 80007a6:	f001 fa1b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800

080007b4 <Bay_h_2>:

static void Bay_h_2(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <Bay_h_2+0x5c>)
 80007be:	f001 fa0f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <Bay_h_2+0x5c>)
 80007ca:	f001 fa09 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <Bay_h_2+0x5c>)
 80007d6:	f001 fa03 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <Bay_h_2+0x5c>)
 80007e2:	f001 f9fd 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <Bay_h_2+0x5c>)
 80007ee:	f001 f9f7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <Bay_h_2+0x5c>)
 80007fa:	f001 f9f1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <Bay_h_2+0x5c>)
 8000806:	f001 f9eb 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <Tam_h_2>:

static void Tam_h_2(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4814      	ldr	r0, [pc, #80]	; (8000870 <Tam_h_2+0x5c>)
 800081e:	f001 f9df 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <Tam_h_2+0x5c>)
 800082a:	f001 f9d9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000834:	480e      	ldr	r0, [pc, #56]	; (8000870 <Tam_h_2+0x5c>)
 8000836:	f001 f9d3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <Tam_h_2+0x5c>)
 8000842:	f001 f9cd 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <Tam_h_2+0x5c>)
 800084e:	f001 f9c7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <Tam_h_2+0x5c>)
 800085a:	f001 f9c1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <Tam_h_2+0x5c>)
 8000866:	f001 f9bb 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010800 	.word	0x40010800

08000874 <Chin_h_2>:

static void Chin_h_2(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(h_2_1_GPIO_Port, h_2_1_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <Chin_h_2+0x5c>)
 800087e:	f001 f9af 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_2_GPIO_Port, h_2_2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <Chin_h_2+0x5c>)
 800088a:	f001 f9a9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_3_GPIO_Port, h_2_3_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	480e      	ldr	r0, [pc, #56]	; (80008d0 <Chin_h_2+0x5c>)
 8000896:	f001 f9a3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_4_GPIO_Port, h_2_4_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <Chin_h_2+0x5c>)
 80008a2:	f001 f99d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_5_GPIO_Port, h_2_5_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <Chin_h_2+0x5c>)
 80008ae:	f001 f997 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_6_GPIO_Port, h_2_6_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <Chin_h_2+0x5c>)
 80008ba:	f001 f991 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(h_2_7_GPIO_Port, h_2_7_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <Chin_h_2+0x5c>)
 80008c6:	f001 f98b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010800 	.word	0x40010800

080008d4 <display7SEG_h_2>:

static void display7SEG_h_2(int num) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d834      	bhi.n	800094c <display7SEG_h_2+0x78>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <display7SEG_h_2+0x14>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000917 	.word	0x08000917
 80008f0:	0800091d 	.word	0x0800091d
 80008f4:	08000923 	.word	0x08000923
 80008f8:	08000929 	.word	0x08000929
 80008fc:	0800092f 	.word	0x0800092f
 8000900:	08000935 	.word	0x08000935
 8000904:	0800093b 	.word	0x0800093b
 8000908:	08000941 	.word	0x08000941
 800090c:	08000947 	.word	0x08000947
    switch(num) {
        case 0: Khong_h_2(); break;
 8000910:	f7ff fe00 	bl	8000514 <Khong_h_2>
 8000914:	e01a      	b.n	800094c <display7SEG_h_2+0x78>
        case 1: Mot_h_2(); break;
 8000916:	f7ff fe2d 	bl	8000574 <Mot_h_2>
 800091a:	e017      	b.n	800094c <display7SEG_h_2+0x78>
        case 2: Hai_h_2(); break;
 800091c:	f7ff fe5a 	bl	80005d4 <Hai_h_2>
 8000920:	e014      	b.n	800094c <display7SEG_h_2+0x78>
        case 3: Ba_h_2(); break;
 8000922:	f7ff fe87 	bl	8000634 <Ba_h_2>
 8000926:	e011      	b.n	800094c <display7SEG_h_2+0x78>
        case 4: Bon_h_2(); break;
 8000928:	f7ff feb4 	bl	8000694 <Bon_h_2>
 800092c:	e00e      	b.n	800094c <display7SEG_h_2+0x78>
        case 5: Nam_h_2(); break;
 800092e:	f7ff fee1 	bl	80006f4 <Nam_h_2>
 8000932:	e00b      	b.n	800094c <display7SEG_h_2+0x78>
        case 6: Sau_h_2(); break;
 8000934:	f7ff ff0e 	bl	8000754 <Sau_h_2>
 8000938:	e008      	b.n	800094c <display7SEG_h_2+0x78>
        case 7: Bay_h_2(); break;
 800093a:	f7ff ff3b 	bl	80007b4 <Bay_h_2>
 800093e:	e005      	b.n	800094c <display7SEG_h_2+0x78>
        case 8: Tam_h_2(); break;
 8000940:	f7ff ff68 	bl	8000814 <Tam_h_2>
 8000944:	e002      	b.n	800094c <display7SEG_h_2+0x78>
        case 9: Chin_h_2(); break;
 8000946:	f7ff ff95 	bl	8000874 <Chin_h_2>
 800094a:	bf00      	nop
    }
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Khong>:

#include "main.h"

static void Khong(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <Khong+0x50>)
 800095e:	f001 f93f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <Khong+0x50>)
 8000968:	f001 f93a 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2104      	movs	r1, #4
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <Khong+0x50>)
 8000972:	f001 f935 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <Khong+0x50>)
 800097c:	f001 f930 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <Khong+0x50>)
 8000986:	f001 f92b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <Khong+0x50>)
 8000990:	f001 f926 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <Khong+0x50>)
 800099a:	f001 f921 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <Mot>:

static void Mot(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <Mot+0x50>)
 80009b2:	f001 f915 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <Mot+0x50>)
 80009bc:	f001 f910 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <Mot+0x50>)
 80009c6:	f001 f90b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <Mot+0x50>)
 80009d0:	f001 f906 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <Mot+0x50>)
 80009da:	f001 f901 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <Mot+0x50>)
 80009e4:	f001 f8fc 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <Mot+0x50>)
 80009ee:	f001 f8f7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40010c00 	.word	0x40010c00

080009fc <Hai>:

static void Hai(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Hai+0x50>)
 8000a06:	f001 f8eb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <Hai+0x50>)
 8000a10:	f001 f8e6 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2104      	movs	r1, #4
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <Hai+0x50>)
 8000a1a:	f001 f8e1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <Hai+0x50>)
 8000a24:	f001 f8dc 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <Hai+0x50>)
 8000a2e:	f001 f8d7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2120      	movs	r1, #32
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <Hai+0x50>)
 8000a38:	f001 f8d2 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <Hai+0x50>)
 8000a42:	f001 f8cd 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <Ba>:

static void Ba(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <Ba+0x50>)
 8000a5a:	f001 f8c1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2102      	movs	r1, #2
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <Ba+0x50>)
 8000a64:	f001 f8bc 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <Ba+0x50>)
 8000a6e:	f001 f8b7 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2108      	movs	r1, #8
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <Ba+0x50>)
 8000a78:	f001 f8b2 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <Ba+0x50>)
 8000a82:	f001 f8ad 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <Ba+0x50>)
 8000a8c:	f001 f8a8 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <Ba+0x50>)
 8000a96:	f001 f8a3 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <Bon>:

static void Bon(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <Bon+0x50>)
 8000aae:	f001 f897 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <Bon+0x50>)
 8000ab8:	f001 f892 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <Bon+0x50>)
 8000ac2:	f001 f88d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <Bon+0x50>)
 8000acc:	f001 f888 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <Bon+0x50>)
 8000ad6:	f001 f883 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <Bon+0x50>)
 8000ae0:	f001 f87e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <Bon+0x50>)
 8000aea:	f001 f879 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <Nam>:

static void Nam(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <Nam+0x50>)
 8000b02:	f001 f86d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	480f      	ldr	r0, [pc, #60]	; (8000b48 <Nam+0x50>)
 8000b0c:	f001 f868 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2104      	movs	r1, #4
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <Nam+0x50>)
 8000b16:	f001 f863 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <Nam+0x50>)
 8000b20:	f001 f85e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2110      	movs	r1, #16
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <Nam+0x50>)
 8000b2a:	f001 f859 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2120      	movs	r1, #32
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <Nam+0x50>)
 8000b34:	f001 f854 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <Nam+0x50>)
 8000b3e:	f001 f84f 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <Sau>:

static void Sau(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <Sau+0x50>)
 8000b56:	f001 f843 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <Sau+0x50>)
 8000b60:	f001 f83e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2104      	movs	r1, #4
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <Sau+0x50>)
 8000b6a:	f001 f839 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2108      	movs	r1, #8
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <Sau+0x50>)
 8000b74:	f001 f834 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <Sau+0x50>)
 8000b7e:	f001 f82f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <Sau+0x50>)
 8000b88:	f001 f82a 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <Sau+0x50>)
 8000b92:	f001 f825 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <Bay>:

static void Bay(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <Bay+0x50>)
 8000baa:	f001 f819 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <Bay+0x50>)
 8000bb4:	f001 f814 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <Bay+0x50>)
 8000bbe:	f001 f80f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <Bay+0x50>)
 8000bc8:	f001 f80a 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <Bay+0x50>)
 8000bd2:	f001 f805 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <Bay+0x50>)
 8000bdc:	f001 f800 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <Bay+0x50>)
 8000be6:	f000 fffb 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <Tam>:

static void Tam(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <Tam+0x50>)
 8000bfe:	f000 ffef 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2102      	movs	r1, #2
 8000c06:	480f      	ldr	r0, [pc, #60]	; (8000c44 <Tam+0x50>)
 8000c08:	f000 ffea 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2104      	movs	r1, #4
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <Tam+0x50>)
 8000c12:	f000 ffe5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2108      	movs	r1, #8
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <Tam+0x50>)
 8000c1c:	f000 ffe0 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2110      	movs	r1, #16
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <Tam+0x50>)
 8000c26:	f000 ffdb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <Tam+0x50>)
 8000c30:	f000 ffd6 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <Tam+0x50>)
 8000c3a:	f000 ffd1 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <Chin>:

static void Chin(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <Chin+0x50>)
 8000c52:	f000 ffc5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2102      	movs	r1, #2
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <Chin+0x50>)
 8000c5c:	f000 ffc0 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2104      	movs	r1, #4
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <Chin+0x50>)
 8000c66:	f000 ffbb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	480a      	ldr	r0, [pc, #40]	; (8000c98 <Chin+0x50>)
 8000c70:	f000 ffb6 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <Chin+0x50>)
 8000c7a:	f000 ffb1 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <Chin+0x50>)
 8000c84:	f000 ffac 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <Chin+0x50>)
 8000c8e:	f000 ffa7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <display7SEG_m_1>:

static void display7SEG_m_1(int num) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d834      	bhi.n	8000d14 <display7SEG_m_1+0x78>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <display7SEG_m_1+0x14>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cd9 	.word	0x08000cd9
 8000cb4:	08000cdf 	.word	0x08000cdf
 8000cb8:	08000ce5 	.word	0x08000ce5
 8000cbc:	08000ceb 	.word	0x08000ceb
 8000cc0:	08000cf1 	.word	0x08000cf1
 8000cc4:	08000cf7 	.word	0x08000cf7
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000d03 	.word	0x08000d03
 8000cd0:	08000d09 	.word	0x08000d09
 8000cd4:	08000d0f 	.word	0x08000d0f
    switch(num) {
        case 0: Khong(); break;
 8000cd8:	f7ff fe3c 	bl	8000954 <Khong>
 8000cdc:	e01a      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 1: Mot(); break;
 8000cde:	f7ff fe63 	bl	80009a8 <Mot>
 8000ce2:	e017      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 2: Hai(); break;
 8000ce4:	f7ff fe8a 	bl	80009fc <Hai>
 8000ce8:	e014      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 3: Ba(); break;
 8000cea:	f7ff feb1 	bl	8000a50 <Ba>
 8000cee:	e011      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 4: Bon(); break;
 8000cf0:	f7ff fed8 	bl	8000aa4 <Bon>
 8000cf4:	e00e      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 5: Nam(); break;
 8000cf6:	f7ff feff 	bl	8000af8 <Nam>
 8000cfa:	e00b      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 6: Sau(); break;
 8000cfc:	f7ff ff26 	bl	8000b4c <Sau>
 8000d00:	e008      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 7: Bay(); break;
 8000d02:	f7ff ff4d 	bl	8000ba0 <Bay>
 8000d06:	e005      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 8: Tam(); break;
 8000d08:	f7ff ff74 	bl	8000bf4 <Tam>
 8000d0c:	e002      	b.n	8000d14 <display7SEG_m_1+0x78>
        case 9: Chin(); break;
 8000d0e:	f7ff ff9b 	bl	8000c48 <Chin>
 8000d12:	bf00      	nop
    }
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <Khong_m_2>:

#include "main.h"

static void Khong_m_2(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <Khong_m_2+0x5c>)
 8000d26:	f000 ff5b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <Khong_m_2+0x5c>)
 8000d32:	f000 ff55 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <Khong_m_2+0x5c>)
 8000d3e:	f000 ff4f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <Khong_m_2+0x5c>)
 8000d4a:	f000 ff49 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <Khong_m_2+0x5c>)
 8000d56:	f000 ff43 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <Khong_m_2+0x5c>)
 8000d62:	f000 ff3d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <Khong_m_2+0x5c>)
 8000d6e:	f000 ff37 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <Mot_m_2>:

static void Mot_m_2(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <Mot_m_2+0x5c>)
 8000d86:	f000 ff2b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <Mot_m_2+0x5c>)
 8000d92:	f000 ff25 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <Mot_m_2+0x5c>)
 8000d9e:	f000 ff1f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <Mot_m_2+0x5c>)
 8000daa:	f000 ff19 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <Mot_m_2+0x5c>)
 8000db6:	f000 ff13 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <Mot_m_2+0x5c>)
 8000dc2:	f000 ff0d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <Mot_m_2+0x5c>)
 8000dce:	f000 ff07 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <Hai_m_2>:

static void Hai_m_2(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <Hai_m_2+0x5c>)
 8000de6:	f000 fefb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <Hai_m_2+0x5c>)
 8000df2:	f000 fef5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <Hai_m_2+0x5c>)
 8000dfe:	f000 feef 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <Hai_m_2+0x5c>)
 8000e0a:	f000 fee9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <Hai_m_2+0x5c>)
 8000e16:	f000 fee3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <Hai_m_2+0x5c>)
 8000e22:	f000 fedd 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <Hai_m_2+0x5c>)
 8000e2e:	f000 fed7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010c00 	.word	0x40010c00

08000e3c <Ba_m_2>:

static void Ba_m_2(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <Ba_m_2+0x5c>)
 8000e46:	f000 fecb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	4811      	ldr	r0, [pc, #68]	; (8000e98 <Ba_m_2+0x5c>)
 8000e52:	f000 fec5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <Ba_m_2+0x5c>)
 8000e5e:	f000 febf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <Ba_m_2+0x5c>)
 8000e6a:	f000 feb9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e74:	4808      	ldr	r0, [pc, #32]	; (8000e98 <Ba_m_2+0x5c>)
 8000e76:	f000 feb3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <Ba_m_2+0x5c>)
 8000e82:	f000 fead 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <Ba_m_2+0x5c>)
 8000e8e:	f000 fea7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <Bon_m_2>:

static void Bon_m_2(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <Bon_m_2+0x5c>)
 8000ea6:	f000 fe9b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <Bon_m_2+0x5c>)
 8000eb2:	f000 fe95 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <Bon_m_2+0x5c>)
 8000ebe:	f000 fe8f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <Bon_m_2+0x5c>)
 8000eca:	f000 fe89 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <Bon_m_2+0x5c>)
 8000ed6:	f000 fe83 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <Bon_m_2+0x5c>)
 8000ee2:	f000 fe7d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <Bon_m_2+0x5c>)
 8000eee:	f000 fe77 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010c00 	.word	0x40010c00

08000efc <Nam_m_2>:

static void Nam_m_2(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <Nam_m_2+0x5c>)
 8000f06:	f000 fe6b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <Nam_m_2+0x5c>)
 8000f12:	f000 fe65 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <Nam_m_2+0x5c>)
 8000f1e:	f000 fe5f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <Nam_m_2+0x5c>)
 8000f2a:	f000 fe59 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <Nam_m_2+0x5c>)
 8000f36:	f000 fe53 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <Nam_m_2+0x5c>)
 8000f42:	f000 fe4d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <Nam_m_2+0x5c>)
 8000f4e:	f000 fe47 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <Sau_m_2>:

static void Sau_m_2(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <Sau_m_2+0x5c>)
 8000f66:	f000 fe3b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <Sau_m_2+0x5c>)
 8000f72:	f000 fe35 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <Sau_m_2+0x5c>)
 8000f7e:	f000 fe2f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <Sau_m_2+0x5c>)
 8000f8a:	f000 fe29 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <Sau_m_2+0x5c>)
 8000f96:	f000 fe23 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Sau_m_2+0x5c>)
 8000fa2:	f000 fe1d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <Sau_m_2+0x5c>)
 8000fae:	f000 fe17 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <Bay_m_2>:

static void Bay_m_2(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	4814      	ldr	r0, [pc, #80]	; (8001018 <Bay_m_2+0x5c>)
 8000fc6:	f000 fe0b 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd0:	4811      	ldr	r0, [pc, #68]	; (8001018 <Bay_m_2+0x5c>)
 8000fd2:	f000 fe05 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <Bay_m_2+0x5c>)
 8000fde:	f000 fdff 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <Bay_m_2+0x5c>)
 8000fea:	f000 fdf9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <Bay_m_2+0x5c>)
 8000ff6:	f000 fdf3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <Bay_m_2+0x5c>)
 8001002:	f000 fded 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <Bay_m_2+0x5c>)
 800100e:	f000 fde7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010c00 	.word	0x40010c00

0800101c <Tam_m_2>:

static void Tam_m_2(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <Tam_m_2+0x5c>)
 8001026:	f000 fddb 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <Tam_m_2+0x5c>)
 8001032:	f000 fdd5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <Tam_m_2+0x5c>)
 800103e:	f000 fdcf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <Tam_m_2+0x5c>)
 800104a:	f000 fdc9 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <Tam_m_2+0x5c>)
 8001056:	f000 fdc3 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <Tam_m_2+0x5c>)
 8001062:	f000 fdbd 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <Tam_m_2+0x5c>)
 800106e:	f000 fdb7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010c00 	.word	0x40010c00

0800107c <Chin_m_2>:

static void Chin_m_2(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(m_1_GPIO_Port, m_1_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	4814      	ldr	r0, [pc, #80]	; (80010d8 <Chin_m_2+0x5c>)
 8001086:	f000 fdab 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_2_GPIO_Port, m_2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <Chin_m_2+0x5c>)
 8001092:	f000 fda5 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_3_GPIO_Port, m_3_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	480e      	ldr	r0, [pc, #56]	; (80010d8 <Chin_m_2+0x5c>)
 800109e:	f000 fd9f 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_4_GPIO_Port, m_4_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <Chin_m_2+0x5c>)
 80010aa:	f000 fd99 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_5_GPIO_Port, m_5_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <Chin_m_2+0x5c>)
 80010b6:	f000 fd93 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_6_GPIO_Port, m_6_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <Chin_m_2+0x5c>)
 80010c2:	f000 fd8d 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m_7_GPIO_Port, m_7_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <Chin_m_2+0x5c>)
 80010ce:	f000 fd87 	bl	8001be0 <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010c00 	.word	0x40010c00

080010dc <display7SEG_m_2>:

static void display7SEG_m_2(int num) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d834      	bhi.n	8001154 <display7SEG_m_2+0x78>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <display7SEG_m_2+0x14>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001119 	.word	0x08001119
 80010f4:	0800111f 	.word	0x0800111f
 80010f8:	08001125 	.word	0x08001125
 80010fc:	0800112b 	.word	0x0800112b
 8001100:	08001131 	.word	0x08001131
 8001104:	08001137 	.word	0x08001137
 8001108:	0800113d 	.word	0x0800113d
 800110c:	08001143 	.word	0x08001143
 8001110:	08001149 	.word	0x08001149
 8001114:	0800114f 	.word	0x0800114f
    switch(num) {
        case 0: Khong_m_2(); break;
 8001118:	f7ff fe00 	bl	8000d1c <Khong_m_2>
 800111c:	e01a      	b.n	8001154 <display7SEG_m_2+0x78>
        case 1: Mot_m_2(); break;
 800111e:	f7ff fe2d 	bl	8000d7c <Mot_m_2>
 8001122:	e017      	b.n	8001154 <display7SEG_m_2+0x78>
        case 2: Hai_m_2(); break;
 8001124:	f7ff fe5a 	bl	8000ddc <Hai_m_2>
 8001128:	e014      	b.n	8001154 <display7SEG_m_2+0x78>
        case 3: Ba_m_2(); break;
 800112a:	f7ff fe87 	bl	8000e3c <Ba_m_2>
 800112e:	e011      	b.n	8001154 <display7SEG_m_2+0x78>
        case 4: Bon_m_2(); break;
 8001130:	f7ff feb4 	bl	8000e9c <Bon_m_2>
 8001134:	e00e      	b.n	8001154 <display7SEG_m_2+0x78>
        case 5: Nam_m_2(); break;
 8001136:	f7ff fee1 	bl	8000efc <Nam_m_2>
 800113a:	e00b      	b.n	8001154 <display7SEG_m_2+0x78>
        case 6: Sau_m_2(); break;
 800113c:	f7ff ff0e 	bl	8000f5c <Sau_m_2>
 8001140:	e008      	b.n	8001154 <display7SEG_m_2+0x78>
        case 7: Bay_m_2(); break;
 8001142:	f7ff ff3b 	bl	8000fbc <Bay_m_2>
 8001146:	e005      	b.n	8001154 <display7SEG_m_2+0x78>
        case 8: Tam_m_2(); break;
 8001148:	f7ff ff68 	bl	800101c <Tam_m_2>
 800114c:	e002      	b.n	8001154 <display7SEG_m_2+0x78>
        case 9: Chin_m_2(); break;
 800114e:	f7ff ff95 	bl	800107c <Chin_m_2>
 8001152:	bf00      	nop
    }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <updateClockBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int hour = 15, minute = 9, second = 55;
void updateClockBuffer(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	display7SEG_m_1(second % 10);
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <updateClockBuffer+0x74>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <updateClockBuffer+0x78>)
 8001166:	fb83 1302 	smull	r1, r3, r3, r2
 800116a:	1099      	asrs	r1, r3, #2
 800116c:	17d3      	asrs	r3, r2, #31
 800116e:	1ac9      	subs	r1, r1, r3
 8001170:	460b      	mov	r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	1ad1      	subs	r1, r2, r3
 800117a:	4608      	mov	r0, r1
 800117c:	f7ff fd8e 	bl	8000c9c <display7SEG_m_1>
	display7SEG_m_2(second / 10);
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <updateClockBuffer+0x74>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <updateClockBuffer+0x78>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	1092      	asrs	r2, r2, #2
 800118c:	17db      	asrs	r3, r3, #31
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffa3 	bl	80010dc <display7SEG_m_2>
	display7SEG_h_1(minute % 10);
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <updateClockBuffer+0x7c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <updateClockBuffer+0x78>)
 800119c:	fb83 1302 	smull	r1, r3, r3, r2
 80011a0:	1099      	asrs	r1, r3, #2
 80011a2:	17d3      	asrs	r3, r2, #31
 80011a4:	1ac9      	subs	r1, r1, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1ad1      	subs	r1, r2, r3
 80011b0:	4608      	mov	r0, r1
 80011b2:	f7ff f96f 	bl	8000494 <display7SEG_h_1>
	display7SEG_h_2(minute / 10);
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <updateClockBuffer+0x7c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <updateClockBuffer+0x78>)
 80011bc:	fb82 1203 	smull	r1, r2, r2, r3
 80011c0:	1092      	asrs	r2, r2, #2
 80011c2:	17db      	asrs	r3, r3, #31
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fb84 	bl	80008d4 <display7SEG_h_2>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000008 	.word	0x20000008
 80011d4:	66666667 	.word	0x66666667
 80011d8:	20000004 	.word	0x20000004

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fa14 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f842 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f8c8 	bl	800137c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011ec:	f000 f87a 	bl	80012e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <main+0x7c>)
 80011f2:	f001 f939 	bl	8002468 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f000 f926 	bl	8001448 <setTimer1>
  while (1) {
	  if(timer1_flag == 1){
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <main+0x80>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d1fb      	bne.n	80011fc <main+0x20>
		  setTimer1(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f000 f91f 	bl	8001448 <setTimer1>
		  second ++;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <main+0x84>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <main+0x84>)
 8001212:	6013      	str	r3, [r2, #0]
		  if ( second >= 60) {
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <main+0x84>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b3b      	cmp	r3, #59	; 0x3b
 800121a:	dd07      	ble.n	800122c <main+0x50>
			  second = 0;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <main+0x84>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
			  minute ++;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <main+0x88>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <main+0x88>)
 800122a:	6013      	str	r3, [r2, #0]
		  }
		  if( minute >= 60) {
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <main+0x88>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b3b      	cmp	r3, #59	; 0x3b
 8001232:	dd07      	ble.n	8001244 <main+0x68>
			  minute = 0;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <main+0x88>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
			  hour ++;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <main+0x8c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a09      	ldr	r2, [pc, #36]	; (8001268 <main+0x8c>)
 8001242:	6013      	str	r3, [r2, #0]
		  }
		  if( hour >=24){
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <main+0x8c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b17      	cmp	r3, #23
 800124a:	dd02      	ble.n	8001252 <main+0x76>
			hour = 0;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <main+0x8c>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
		  }
		  updateClockBuffer();
 8001252:	f7ff ff83 	bl	800115c <updateClockBuffer>
	  if(timer1_flag == 1){
 8001256:	e7d1      	b.n	80011fc <main+0x20>
 8001258:	2000003c 	.word	0x2000003c
 800125c:	20000038 	.word	0x20000038
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004
 8001268:	20000000 	.word	0x20000000

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	; 0x40
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fca4 	bl	8002bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2310      	movs	r3, #16
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fcb4 	bl	8001c10 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012ae:	f000 f8c5 	bl	800143c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 ff20 	bl	8002110 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f8b1 	bl	800143c <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3740      	adds	r7, #64	; 0x40
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_TIM2_Init+0x94>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_TIM2_Init+0x94>)
 800130a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800130e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM2_Init+0x94>)
 8001318:	2209      	movs	r2, #9
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM2_Init+0x94>)
 800132a:	f001 f84d 	bl	80023c8 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001334:	f000 f882 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM2_Init+0x94>)
 8001346:	f001 f9cb 	bl	80026e0 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 f874 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM2_Init+0x94>)
 8001362:	f001 fba3 	bl	8002aac <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 f866 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000003c 	.word	0x2000003c

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_GPIO_Init+0xa0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_GPIO_Init+0xa0>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_GPIO_Init+0xa0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_GPIO_Init+0xa0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_GPIO_Init+0xa0>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_GPIO_Init+0xa0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, h_1_1_Pin|h_1_2_Pin|h_1_3_Pin|h_1_4_Pin
 80013c0:	2200      	movs	r2, #0
 80013c2:	f64b 71ef 	movw	r1, #49135	; 0xbfef
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_GPIO_Init+0xa4>)
 80013c8:	f000 fc0a 	bl	8001be0 <HAL_GPIO_WritePin>
                          |h_1_5_Pin|h_1_6_Pin|h_1_7_Pin|h_2_1_Pin
                          |h_2_2_Pin|h_2_3_Pin|h_2_4_Pin|h_2_5_Pin
                          |h_2_6_Pin|h_2_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|m_4_Pin
 80013cc:	2200      	movs	r2, #0
 80013ce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_GPIO_Init+0xa8>)
 80013d4:	f000 fc04 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : h_1_1_Pin h_1_2_Pin h_1_3_Pin h_1_4_Pin
                           h_1_5_Pin h_1_6_Pin h_1_7_Pin h_2_1_Pin
                           h_2_2_Pin h_2_3_Pin h_2_4_Pin h_2_5_Pin
                           h_2_6_Pin h_2_7_Pin */
  GPIO_InitStruct.Pin = h_1_1_Pin|h_1_2_Pin|h_1_3_Pin|h_1_4_Pin
 80013d8:	f64b 73ef 	movw	r3, #49135	; 0xbfef
 80013dc:	60bb      	str	r3, [r7, #8]
                          |h_1_5_Pin|h_1_6_Pin|h_1_7_Pin|h_2_1_Pin
                          |h_2_2_Pin|h_2_3_Pin|h_2_4_Pin|h_2_5_Pin
                          |h_2_6_Pin|h_2_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_GPIO_Init+0xa4>)
 80013f2:	f000 fa7b 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin m_4_Pin
                           m_5_Pin m_6_Pin m_7_Pin d_Pin
                           e_Pin f_Pin g_Pin m_1_Pin
                           m_2_Pin m_3_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|m_4_Pin
 80013f6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013fa:	60bb      	str	r3, [r7, #8]
                          |m_5_Pin|m_6_Pin|m_7_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|m_1_Pin
                          |m_2_Pin|m_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2302      	movs	r3, #2
 8001406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0xa8>)
 8001410:	f000 fa6c 	bl	80018ec <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00

08001428 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001430:	f000 f81e 	bl	8001470 <timerRun>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <setTimer1>:
#include "software_timer.h"

int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <setTimer1+0x20>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <setTimer1+0x24>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000034 	.word	0x20000034
 800146c:	20000038 	.word	0x20000038

08001470 <timerRun>:

void timerRun(){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <timerRun+0x2c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd0b      	ble.n	8001494 <timerRun+0x24>
		timer1_counter--;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <timerRun+0x2c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <timerRun+0x2c>)
 8001484:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <timerRun+0x2c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dc02      	bgt.n	8001494 <timerRun+0x24>
			timer1_flag = 1;
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <timerRun+0x30>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000034 	.word	0x20000034
 80014a0:	20000038 	.word	0x20000038

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_MspInit+0x5c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_MspInit+0x5c>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_MspInit+0x5c>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_MspInit+0x5c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_MspInit+0x5c>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MspInit+0x60>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_MspInit+0x60>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001518:	d113      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	201c      	movs	r0, #28
 8001538:	f000 f9a1 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800153c:	201c      	movs	r0, #28
 800153e:	f000 f9ba 	bl	80018b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 f87f 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM2_IRQHandler+0x10>)
 80015a6:	f000 ffab 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000003c 	.word	0x2000003c

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c0:	f7ff fff8 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c6:	490c      	ldr	r1, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015dc:	4c09      	ldr	r4, [pc, #36]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f001 fac9 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff fdf5 	bl	80011dc <main>
  bx lr
 80015f2:	4770      	bx	lr
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80015fc:	08002c1c 	.word	0x08002c1c
  ldr r2, =_sbss
 8001600:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001604:	20000088 	.word	0x20000088

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f923 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff ff3c 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f93b 	bl	80018d2 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f903 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000000c 	.word	0x2000000c
 8001690:	20000014 	.word	0x20000014
 8001694:	20000010 	.word	0x20000010

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_IncTick+0x20>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000014 	.word	0x20000014
 80016b8:	20000084 	.word	0x20000084

080016bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000084 	.word	0x20000084

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <__NVIC_EnableIRQ+0x34>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff90 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff2d 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff42 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff90 	bl	80017c0 <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5f 	bl	800176c <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff35 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e148      	b.n	8001b92 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001900:	2201      	movs	r2, #1
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8137 	bne.w	8001b8c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4aa3      	ldr	r2, [pc, #652]	; (8001bb0 <HAL_GPIO_Init+0x2c4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d05e      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001928:	4aa1      	ldr	r2, [pc, #644]	; (8001bb0 <HAL_GPIO_Init+0x2c4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d875      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800192e:	4aa1      	ldr	r2, [pc, #644]	; (8001bb4 <HAL_GPIO_Init+0x2c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d058      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001934:	4a9f      	ldr	r2, [pc, #636]	; (8001bb4 <HAL_GPIO_Init+0x2c8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d86f      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800193a:	4a9f      	ldr	r2, [pc, #636]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d052      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001940:	4a9d      	ldr	r2, [pc, #628]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d869      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001946:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d04c      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 800194c:	4a9b      	ldr	r2, [pc, #620]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d863      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001952:	4a9b      	ldr	r2, [pc, #620]	; (8001bc0 <HAL_GPIO_Init+0x2d4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d046      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001958:	4a99      	ldr	r2, [pc, #612]	; (8001bc0 <HAL_GPIO_Init+0x2d4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d85d      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d82a      	bhi.n	80019b8 <HAL_GPIO_Init+0xcc>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d859      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <HAL_GPIO_Init+0x80>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019c1 	.word	0x080019c1
 8001974:	080019d3 	.word	0x080019d3
 8001978:	08001a15 	.word	0x08001a15
 800197c:	08001a1b 	.word	0x08001a1b
 8001980:	08001a1b 	.word	0x08001a1b
 8001984:	08001a1b 	.word	0x08001a1b
 8001988:	08001a1b 	.word	0x08001a1b
 800198c:	08001a1b 	.word	0x08001a1b
 8001990:	08001a1b 	.word	0x08001a1b
 8001994:	08001a1b 	.word	0x08001a1b
 8001998:	08001a1b 	.word	0x08001a1b
 800199c:	08001a1b 	.word	0x08001a1b
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	08001a1b 	.word	0x08001a1b
 80019a8:	08001a1b 	.word	0x08001a1b
 80019ac:	08001a1b 	.word	0x08001a1b
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019dd 	.word	0x080019dd
 80019b8:	4a82      	ldr	r2, [pc, #520]	; (8001bc4 <HAL_GPIO_Init+0x2d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019be:	e02c      	b.n	8001a1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e029      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	3304      	adds	r3, #4
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e024      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	3308      	adds	r3, #8
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e01f      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	330c      	adds	r3, #12
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e01a      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ee:	2304      	movs	r3, #4
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e013      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	611a      	str	r2, [r3, #16]
          break;
 8001a06:	e009      	b.n	8001a1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	615a      	str	r2, [r3, #20]
          break;
 8001a12:	e003      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          break;
 8001a1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d801      	bhi.n	8001a26 <HAL_GPIO_Init+0x13a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	e001      	b.n	8001a2a <HAL_GPIO_Init+0x13e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d802      	bhi.n	8001a38 <HAL_GPIO_Init+0x14c>
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x152>
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3b08      	subs	r3, #8
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	210f      	movs	r1, #15
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8090 	beq.w	8001b8c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_GPIO_Init+0x2dc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_GPIO_Init+0x2dc>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_GPIO_Init+0x2dc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a49      	ldr	r2, [pc, #292]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00d      	beq.n	8001acc <HAL_GPIO_Init+0x1e0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2ec>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_GPIO_Init+0x1d8>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001acc:	2300      	movs	r3, #0
 8001ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4937      	ldr	r1, [pc, #220]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4933      	ldr	r1, [pc, #204]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	492d      	ldr	r1, [pc, #180]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4929      	ldr	r1, [pc, #164]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4923      	ldr	r1, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	491f      	ldr	r1, [pc, #124]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4919      	ldr	r1, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4915      	ldr	r1, [pc, #84]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3301      	adds	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f47f aeaf 	bne.w	8001900 <HAL_GPIO_Init+0x14>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
 8001ba6:	372c      	adds	r7, #44	; 0x2c
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	10320000 	.word	0x10320000
 8001bb4:	10310000 	.word	0x10310000
 8001bb8:	10220000 	.word	0x10220000
 8001bbc:	10210000 	.word	0x10210000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10110000 	.word	0x10110000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e26c      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x12c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e246      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x76>
 8001c78:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xbc>
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fce6 	bl	80016bc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fce2 	bl	80016bc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1fa      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe4>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fcd2 	bl	80016bc <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fcce 	bl	80016bc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1e6      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x10c>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1ba      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4939      	ldr	r1, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fc87 	bl	80016bc <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff fc83 	bl	80016bc <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e19b      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fc66 	bl	80016bc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc62 	bl	80016bc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e17a      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fc46 	bl	80016bc <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc42 	bl	80016bc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e15a      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 fa9a 	bl	800238c <RCC_Delay>
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fc2c 	bl	80016bc <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc28 	bl	80016bc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e140      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420000 	.word	0x42420000
 8001e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b9e      	ldr	r3, [pc, #632]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e9      	bne.n	8001e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a6 	beq.w	8001fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b97      	ldr	r3, [pc, #604]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b94      	ldr	r3, [pc, #592]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a93      	ldr	r2, [pc, #588]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b91      	ldr	r3, [pc, #580]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b8e      	ldr	r3, [pc, #568]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b8b      	ldr	r3, [pc, #556]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a8a      	ldr	r2, [pc, #552]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fbe9 	bl	80016bc <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7ff fbe5 	bl	80016bc <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0fd      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b81      	ldr	r3, [pc, #516]	; (8002108 <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x312>
 8001f14:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a72      	ldr	r2, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x356>
 8001f4c:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a6c      	ldr	r2, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a69      	ldr	r2, [pc, #420]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f66:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a66      	ldr	r2, [pc, #408]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b64      	ldr	r3, [pc, #400]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb99 	bl	80016bc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fb95 	bl	80016bc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0ab      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x37e>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb83 	bl	80016bc <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fb7f 	bl	80016bc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e095      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a47      	ldr	r2, [pc, #284]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8081 	beq.w	80020fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d061      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d146      	bne.n	800209a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x4fc>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fb53 	bl	80016bc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fb4f 	bl	80016bc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e067      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	492d      	ldr	r1, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a19      	ldr	r1, [r3, #32]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	430b      	orrs	r3, r1
 8002066:	4927      	ldr	r1, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x4fc>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff fb23 	bl	80016bc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff fb1f 	bl	80016bc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e037      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x46a>
 8002098:	e02f      	b.n	80020fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_OscConfig+0x4fc>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fb0c 	bl	80016bc <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fb08 	bl	80016bc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e020      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x498>
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
 800210c:	42420060 	.word	0x42420060

08002110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0d0      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4965      	ldr	r1, [pc, #404]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800218e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e073      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06b      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7ff fa5c 	bl	80016bc <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff fa58 	bl	80016bc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e053      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d210      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4922      	ldr	r1, [pc, #136]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1cc>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1d0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f9ba 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	08002bf0 	.word	0x08002bf0
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	20000010 	.word	0x20000010

080022e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_RCC_GetSysClockFreq+0x94>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x30>
 800230e:	2b08      	cmp	r3, #8
 8002310:	d003      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x36>
 8002312:	e027      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_GetSysClockFreq+0x98>)
 8002316:	613b      	str	r3, [r7, #16]
      break;
 8002318:	e027      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_RCC_GetSysClockFreq+0x94>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0c5b      	lsrs	r3, r3, #17
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_RCC_GetSysClockFreq+0x98>)
 8002346:	fb02 f203 	mul.w	r2, r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e004      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	613b      	str	r3, [r7, #16]
      break;
 8002362:	e002      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0x98>)
 8002366:	613b      	str	r3, [r7, #16]
      break;
 8002368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236a:	693b      	ldr	r3, [r7, #16]
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	007a1200 	.word	0x007a1200
 8002380:	08002c00 	.word	0x08002c00
 8002384:	08002c10 	.word	0x08002c10
 8002388:	003d0900 	.word	0x003d0900

0800238c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <RCC_Delay+0x34>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <RCC_Delay+0x38>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0a5b      	lsrs	r3, r3, #9
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a8:	bf00      	nop
  }
  while (Delay --);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	60fa      	str	r2, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f9      	bne.n	80023a8 <RCC_Delay+0x1c>
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff f88a 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 fa56 	bl	80028b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e035      	b.n	80024ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_TIM_Base_Start_IT+0x90>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_TIM_Base_Start_IT+0x4e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d004      	beq.n	80024b6 <HAL_TIM_Base_Start_IT+0x4e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <HAL_TIM_Base_Start_IT+0x94>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d111      	bne.n	80024da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d010      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	e007      	b.n	80024ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40000400 	.word	0x40000400

08002500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f998 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f98b 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f99a 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0204 	mvn.w	r2, #4
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f972 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f965 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f974 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0208 	mvn.w	r2, #8
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2204      	movs	r2, #4
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f94c 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f93f 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f94e 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0210 	mvn.w	r2, #16
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2208      	movs	r2, #8
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f926 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f919 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f928 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0201 	mvn.w	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fede 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa6f 	bl	8002b6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8f8 	bl	80028a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0220 	mvn.w	r2, #32
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa42 	bl	8002b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_TIM_ConfigClockSource+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0b4      	b.n	8002866 <HAL_TIM_ConfigClockSource+0x186>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800271a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002734:	d03e      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273a:	f200 8087 	bhi.w	800284c <HAL_TIM_ConfigClockSource+0x16c>
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	f000 8086 	beq.w	8002852 <HAL_TIM_ConfigClockSource+0x172>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	d87f      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d01a      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xa6>
 8002750:	2b70      	cmp	r3, #112	; 0x70
 8002752:	d87b      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d050      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x11a>
 8002758:	2b60      	cmp	r3, #96	; 0x60
 800275a:	d877      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d03c      	beq.n	80027da <HAL_TIM_ConfigClockSource+0xfa>
 8002760:	2b50      	cmp	r3, #80	; 0x50
 8002762:	d873      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d058      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x13a>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d86f      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d064      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x15a>
 8002770:	2b30      	cmp	r3, #48	; 0x30
 8002772:	d86b      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d060      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b20      	cmp	r3, #32
 800277a:	d867      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b10      	cmp	r3, #16
 8002782:	d05a      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x15a>
 8002784:	e062      	b.n	800284c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f000 f96a 	bl	8002a6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	609a      	str	r2, [r3, #8]
      break;
 80027b2:	e04f      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f000 f953 	bl	8002a6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d6:	609a      	str	r2, [r3, #8]
      break;
 80027d8:	e03c      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 f8ca 	bl	8002980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2150      	movs	r1, #80	; 0x50
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f921 	bl	8002a3a <TIM_ITRx_SetConfig>
      break;
 80027f8:	e02c      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f000 f8e8 	bl	80029dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2160      	movs	r1, #96	; 0x60
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f911 	bl	8002a3a <TIM_ITRx_SetConfig>
      break;
 8002818:	e01c      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8aa 	bl	8002980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f901 	bl	8002a3a <TIM_ITRx_SetConfig>
      break;
 8002838:	e00c      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f000 f8f8 	bl	8002a3a <TIM_ITRx_SetConfig>
      break;
 800284a:	e003      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e000      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <TIM_Base_SetConfig+0xc0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <TIM_Base_SetConfig+0x28>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0x28>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a28      	ldr	r2, [pc, #160]	; (800297c <TIM_Base_SetConfig+0xc4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d108      	bne.n	80028f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a20      	ldr	r2, [pc, #128]	; (8002978 <TIM_Base_SetConfig+0xc0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0x52>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1d      	ldr	r2, [pc, #116]	; (800297c <TIM_Base_SetConfig+0xc4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <TIM_Base_SetConfig+0xc0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d103      	bne.n	8002950 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f023 0201 	bic.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
  }
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400

08002980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 030a 	bic.w	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0210 	bic.w	r2, r3, #16
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	031b      	lsls	r3, r3, #12
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	621a      	str	r2, [r3, #32]
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 0307 	orr.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b087      	sub	sp, #28
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	021a      	lsls	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	609a      	str	r2, [r3, #8]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e041      	b.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d004      	beq.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10c      	bne.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40000400 	.word	0x40000400

08002b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	2600      	movs	r6, #0
 8002b84:	4d0c      	ldr	r5, [pc, #48]	; (8002bb8 <__libc_init_array+0x38>)
 8002b86:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	f000 f822 	bl	8002bd8 <_init>
 8002b94:	2600      	movs	r6, #0
 8002b96:	4d0a      	ldr	r5, [pc, #40]	; (8002bc0 <__libc_init_array+0x40>)
 8002b98:	4c0a      	ldr	r4, [pc, #40]	; (8002bc4 <__libc_init_array+0x44>)
 8002b9a:	1b64      	subs	r4, r4, r5
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08002c14 	.word	0x08002c14
 8002bbc:	08002c14 	.word	0x08002c14
 8002bc0:	08002c14 	.word	0x08002c14
 8002bc4:	08002c18 	.word	0x08002c18

08002bc8 <memset>:
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4402      	add	r2, r0
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <memset+0xa>
 8002bd0:	4770      	bx	lr
 8002bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd6:	e7f9      	b.n	8002bcc <memset+0x4>

08002bd8 <_init>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	bf00      	nop
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr

08002be4 <_fini>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr
